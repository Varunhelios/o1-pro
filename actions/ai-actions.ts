/**
 * @description
 * This file contains server actions for AI-driven features in the Learn Kannada app.
 * It uses the OpenAI client to generate grammar explanations, supporting the AI-Driven Assistance feature.
 *
 * Key features:
 * - Grammar explanations: Generates concise explanations for Kannada grammar issues
 * - Server-side execution: Ensures API key security and compliance with project rules
 * - Error handling: Manages API errors and rate limits gracefully
 *
 * @dependencies
 * - @/lib/ai/openai: Configured OpenAI client for API calls
 * - @/types: ActionState type for consistent return values
 *
 * @notes
 * - Runs as a server action ("use server") to keep API interactions secure
 * - Assumes input is a Kannada sentence or phrase; may need transliteration support later
 * - Response is limited to 100 tokens for brevity; adjust as needed
 * - Caches could be added for rate limit mitigation in future iterations
 */

"use server"

import { openai } from "@/lib/ai/openai"
import { ActionState } from "@/types"

/**
 * Generates an AI-driven grammar explanation for a given sentence or phrase.
 * @param input - The sentence or phrase to explain (e.g., a user’s mistake)
 * @returns {Promise<ActionState<string>>} - The explanation or an error message
 */
export async function getGrammarExplanationAction(
  input: string
): Promise<ActionState<string>> {
  // Validate input to prevent empty or invalid requests
  if (!input || input.trim().length === 0) {
    return {
      isSuccess: false,
      message: "Input sentence cannot be empty"
    }
  }

  try {
    // Construct a prompt for OpenAI to generate a grammar explanation
    const prompt = `Provide a concise explanation of the grammar rules for this Kannada sentence or phrase: "${input}". Focus on common errors like subject-verb agreement, word order, or case usage. Keep it simple and educational, under 100 words.`

    // Call OpenAI’s chat completion API
    const response = await openai.chat.completions.create({
      model: "gpt-4", // Using GPT-4 for high-quality language understanding; adjust based on availability
      messages: [
        {
          role: "system",
          content:
            "You are a Kannada language expert providing clear, concise grammar explanations."
        },
        { role: "user", content: prompt }
      ],
      max_tokens: 100, // Limit response length for brevity
      temperature: 0.7 // Balanced creativity and accuracy
    })

    // Extract the explanation from the response
    const explanation = response.choices[0]?.message.content?.trim()
    if (!explanation) {
      return {
        isSuccess: false,
        message: "No explanation generated by AI"
      }
    }

    return {
      isSuccess: true,
      message: "Grammar explanation generated successfully",
      data: explanation
    }
  } catch (error) {
    // Handle specific OpenAI errors (e.g., rate limits, network issues)
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error occurred"
    console.error("Error generating grammar explanation:", errorMessage)

    return {
      isSuccess: false,
      message: `Failed to generate explanation: ${errorMessage}`
    }
  }
}